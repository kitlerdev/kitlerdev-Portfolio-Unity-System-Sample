using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;

[CustomEditor(typeof(AudioManager))]
public class AudioConstantsGenerator : Editor
{
    public override void OnInspectorGUI()
    {
        // Draw the default inspector
        DrawDefaultInspector();

        // Add some spacing
        EditorGUILayout.Space(10);

        // Kitler Dev branding
        GUIStyle brandStyle = new GUIStyle(EditorStyles.boldLabel);
        brandStyle.normal.textColor = Color.cyan;
        EditorGUILayout.LabelField("Kitler Dev - Audio System", brandStyle);
        EditorGUILayout.Space(5);

        // Get reference to the AudioManager
        AudioManager audioManager = (AudioManager)target;

        // Button to generate constants with custom style
        GUIStyle buttonStyle = new GUIStyle(GUI.skin.button);
        buttonStyle.fontStyle = FontStyle.Bold;
        buttonStyle.normal.textColor = Color.white;

        if (GUILayout.Button(" Generate Audio Constants", buttonStyle))
        {
            GenerateAudioConstants(audioManager);
        }

        // Help box with instructions
        EditorGUILayout.HelpBox("Constants will be auto-generated in: Assets/Kitler Dev/Audio System/Scripts/Runtime/AudioConstants.cs", MessageType.Info);

        // Auto-generate when changes are made (optional)
        if (GUI.changed)
        {
            GenerateAudioConstants(audioManager);
        }
    }

    private void GenerateAudioConstants(AudioManager audioManager)
    {
        if (audioManager.sound == null || audioManager.sound.Length == 0)
            return;

        // Create string builder for the class code
        StringBuilder sb = new StringBuilder();

        // Start building the class
        sb.AppendLine("// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY");
        sb.AppendLine("// This file is automatically generated by AudioConstantsGenerator.cs");
        sb.AppendLine("");
        sb.AppendLine("public static class Audio");
        sb.AppendLine("{");

        // Add constants for each audio clip name
        foreach (AudioData audioData in audioManager.sound)
        {
            if (!string.IsNullOrEmpty(audioData.Name))
            {
                // Convert name to valid C# identifier (remove spaces, special chars)
                string validName = MakeValidIdentifier(audioData.Name);
                sb.AppendLine($"    public const string {validName} = \"{audioData.Name}\";");
            }
        }

        sb.AppendLine("}");

        // Determine file path
        string filePath = Application.dataPath + "/Kitler Dev/Audio System/Scripts/Runtime/AudioConstants.cs";
        string directoryPath = Path.GetDirectoryName(filePath);

        // Create directory if it doesn't exist
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        // Write to file
        File.WriteAllText(filePath, sb.ToString());

        // Refresh asset database
        AssetDatabase.Refresh();

        Debug.Log("Audio constants generated successfully at: " + filePath);
    }

    private string MakeValidIdentifier(string input)
    {
        // Remove invalid characters and make it a valid C# identifier
        StringBuilder sb = new StringBuilder();

        foreach (char c in input)
        {
            if (char.IsLetterOrDigit(c) || c == '_')
            {
                sb.Append(c);
            }
            else if (c == ' ')
            {
                sb.Append('_');
            }
        }

        // Ensure it doesn't start with a digit
        if (sb.Length > 0 && char.IsDigit(sb[0]))
        {
            sb.Insert(0, '_');
        }

        return sb.ToString();
    }
}